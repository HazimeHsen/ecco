// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  reviews Reviews[]
  order Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  discount       Int      @default(0)
  name           String
  brand          String
  category       String
  price          Int
  countInStock   Int
  images         String[]
  description    String
  quantity       Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  reviews Reviews[]
  orderItems OrderItem[]
}


model Order {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  orderItems     OrderItem[]
  totalCost      Int
  quantity       Int
  country        String
  city           String
  postalCode     String
  state          String
  streetAddress  String
  paymentMethod  String
  isPaid         Boolean   @default(false)
  isDelivered    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  orderId   String  @db.ObjectId
  order     Order @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Reviews {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  rating         Int       @default(0)
  userId         String    @db.ObjectId
  productId      String    @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)

}